function [pfResults,info,miscData] = RunPF_OCL(trafo_present,~,clsNetworkData,clsNetworkLine,clsTrafoData)
%Takes all inputs and sets the call parameters for the MEX Function.
% trafo_present expected 0 or 1;
info = [];
X = 'Start.';
disp(X);
info = [info;X];

chkCode = 0;
%{
if trafo_present~=0
    chkCode = -1;
    X = 'Error<'+string(chkCode)+'>::'+'Network Data Obj is empty or not avaible. Aborting!';
    disp(X);
    info = [info;X];
end
if trafo_present~=1
    chkCode = -1;
    X = 'Error<'+string(chkCode)+'>::'+'Network Data Obj is empty or not avaible. Aborting!';
    disp(X);
    info = [info;X];
end
%}

if isempty(clsNetworkData)==1
    chkCode = -10;
    X = 'Error<'+string(chkCode)+'>::'+'Network Data Obj is empty or not avaible. Aborting!';
    disp(X);
    info = [info;X];
end

if isempty(clsNetworkLine)==1
    chkCode = -11;
    X = 'Error<'+string(chkCode)+'>::'+'Network Line Data Obj is empty or not avaible. Aborting!';
    disp(X);
    info = [info;X];
end

if isempty(clsTrafoData)==1
    if trafo_present==1
        chkCode = -12;
        X = 'Error<'+string(chkCode)+'>::'+'Electrical Transformer Data Obj is empty or not avaible. Aborting!';
        disp(X);
        info = [info;X];
    else
        chkCode = 1;
        X = ' Info<'+string(chkCode)+'>::'+'Electrical Transformer Data Obj is not used!';
        disp(X);
        info = [info;X];
    end
end

if(chkCode == 0)
    starttimeMEX=cputime;
    % [0;30] || [1;31] %
    [out_pfResults] = mex_Newton_Raphson_OpenCL(...
        ...%0
        clsNetworkData.nodeNr,...
        clsNetworkData.nodeType,...
        clsNetworkData.nominalVoltage,...
        clsNetworkData.activePower,...
        clsNetworkData.reactivePower,...
        clsNetworkData.consumedActivePower,...
        clsNetworkData.consumedReactivePower,...
        clsNetworkData.imposedVoltage,...
        clsNetworkData.minimumReactivePower,...
        clsNetworkData.maximumReactivePower,...
        ...%10
        clsNetworkLine.fromNode,...
        clsNetworkLine.toNode,...
        clsNetworkLine.nominalvoltage,...
        clsNetworkLine.length,...
        clsNetworkLine.resistance0,...
        clsNetworkLine.reactance0,...
        clsNetworkLine.conductance0,...
        clsNetworkLine.susceptance0,...
        clsNetworkLine.nrOfConductors,...
        ...%19
        clsTrafoData.from,...
        clsTrafoData.to,...
        clsTrafoData.voltage_from,...
        clsTrafoData.voltage_to,...
        clsTrafoData.apparentPower,...
        clsTrafoData.deltaP0,...
        clsTrafoData.current0,...
        clsTrafoData.deltaPsc,...
        clsTrafoData.voltageSC,...
        clsTrafoData.nrOfTrafo,...
        clsTrafoData.plot,...
        clsTrafoData.deltaUp...
        ...%30
        );
    stoptimeMEX=cputime;
    durataMEX = stoptimeMEX-starttimeMEX;
    X = 'Durata Rulare = '+ string(durataMEX)+ '[s]';
    disp(X);
    info = [info;X];
end

if(chkCode == 1)
    starttimeMEX=cputime;
    [out_pfResults] = mex_Newton_Raphson_OpenCL(...
        ...%0
        clsNetworkData.nodeNr,...
        clsNetworkData.nodeType,...
        clsNetworkData.nominalVoltage,...
        clsNetworkData.activePower,...
        clsNetworkData.reactivePower,...
        clsNetworkData.consumedActivePower,...
        clsNetworkData.consumedReactivePower,...
        clsNetworkData.imposedVoltage,...
        clsNetworkData.minimumReactivePower,...
        clsNetworkData.maximumReactivePower,...
        ...%10
        clsNetworkLine.fromNode,...
        clsNetworkLine.toNode,...
        clsNetworkLine.nominalvoltage,...
        clsNetworkLine.length,...
        clsNetworkLine.resistance0,...
        clsNetworkLine.reactance0,...
        clsNetworkLine.conductance0,...
        clsNetworkLine.susceptance0,...
        clsNetworkLine.nrOfConductors );
    stoptimeMEX=cputime;
    durataMEX = stoptimeMEX-starttimeMEX;
    X = 'Durata Rulare = '+ string(durataMEX)+ '[s]';
    disp(X);
    info = [info;X];
end

pfResults = out_pfResults;

miscData = chkCode;

X = 'Stop.';
disp(X);
info = [info;X];

end

